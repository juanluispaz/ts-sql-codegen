// TCPAuthorsTCS.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { Table } from "ts-sql-query/Table";
import type { DBConnection } from "../helpers/connection-source";
import {
    InsertableRow,
    UpdatableRow,
    SelectedRow,
    InsertableValues,
    UpdatableValues,
    SelectedValues,
} from "ts-sql-query/extras/types";
import {
    extractColumnsFrom,
} from "ts-sql-query/extras/utils";

class TCPAuthorsTCS extends Table<DBConnection, 'TCPAuthorsTCS'> {
    id = this.primaryKey('id', 'int');
    name = this.optionalColumn('name', 'string');
    dob = this.optionalColumn('dob', 'localDate');
    createdAt = this.columnWithDefaultValue('created_at', 'localDateTime');
    updatedAt = this.columnWithDefaultValue('updated_at', 'localDateTime');

    constructor() {
        super('authors');
    }
}

export const TIPAuthorsTIS = new TCPAuthorsTCS();

export type SRPAuthorsSRS = SelectedRow<TCPAuthorsTCS>;
export type IRPAuthorsIRS = InsertableRow<TCPAuthorsTCS>;
export type URPAuthorsURS = UpdatableRow<TCPAuthorsTCS>;
export type SVPAuthorsSVS = SelectedValues<TCPAuthorsTCS>;
export type IVPAuthorsIVS = InsertableValues<TCPAuthorsTCS>;
export type UVPAuthorsUVS = UpdatableValues<TCPAuthorsTCS>;
export const TCsPAuthorsTCsS = extractColumnsFrom(TIPAuthorsTIS);


// TCPBooksTCS.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { Table } from "ts-sql-query/Table";
import type { DBConnection } from "../helpers/connection-source";
import {
    InsertableRow,
    UpdatableRow,
    SelectedRow,
    InsertableValues,
    UpdatableValues,
    SelectedValues,
} from "ts-sql-query/extras/types";
import {
    extractColumnsFrom,
} from "ts-sql-query/extras/utils";
import {
    Genre,
} from "../helpers/types";

class TCPBooksTCS extends Table<DBConnection, 'TCPBooksTCS'> {
    id = this.autogeneratedPrimaryKey('id', 'uuid');
    name = this.column('name', 'string');
    authorId = this.column('author_id', 'int');
    releasedAt = this.optionalColumn('released_at', 'localDate');
    timeToRead = this.optionalColumn('time_to_read', 'int');
    genre = this.optionalColumn<Genre>('genre', 'enum', 'genre');
    /**
     * Sample weight as provided by distributor
     */
    weightGrams = this.optionalColumn('weight_grams', 'double');

    constructor() {
        super('books');
    }
}

export const TIPBooksTIS = new TCPBooksTCS();

export type SRPBooksSRS = SelectedRow<TCPBooksTCS>;
export type IRPBooksIRS = InsertableRow<TCPBooksTCS>;
export type URPBooksURS = UpdatableRow<TCPBooksTCS>;
export type SVPBooksSVS = SelectedValues<TCPBooksTCS>;
export type IVPBooksIVS = InsertableValues<TCPBooksTCS>;
export type UVPBooksUVS = UpdatableValues<TCPBooksTCS>;
export const TCsPBooksTCsS = extractColumnsFrom(TIPBooksTIS);


// TCPChaptersTCS.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { Table } from "ts-sql-query/Table";
import type { DBConnection } from "../helpers/connection-source";
import {
    InsertableRow,
    UpdatableRow,
    SelectedRow,
    InsertableValues,
    UpdatableValues,
    SelectedValues,
} from "ts-sql-query/extras/types";
import {
    extractColumnsFrom,
} from "ts-sql-query/extras/utils";
import {
    ChapterMetadataAdapter,
} from "../helpers/adapters";
import {
    ChapterMetadata,
} from "../helpers/types";

/**
 * Chapters information is only available for books with parseable metadata; Consumers should not assume completeness.
 */
class TCPChaptersTCS extends Table<DBConnection, 'TCPChaptersTCS'> {
    id = this.autogeneratedPrimaryKey('id', 'int');
    name = this.column('name', 'string');
    bookId = this.column('book_id', 'uuid');
    metadata = this.optionalColumn<ChapterMetadata>('metadata', 'custom', 'jsonb', ChapterMetadataAdapter);
    title = this.optionalColumn('title', 'string');
    description = this.optionalColumn('description', 'string');

    constructor() {
        super('chapters');
    }
}

export const TIPChaptersTIS = new TCPChaptersTCS();

export type SRPChaptersSRS = SelectedRow<TCPChaptersTCS>;
export type IRPChaptersIRS = InsertableRow<TCPChaptersTCS>;
export type URPChaptersURS = UpdatableRow<TCPChaptersTCS>;
export type SVPChaptersSVS = SelectedValues<TCPChaptersTCS>;
export type IVPChaptersIVS = InsertableValues<TCPChaptersTCS>;
export type UVPChaptersUVS = UpdatableValues<TCPChaptersTCS>;
export const TCsPChaptersTCsS = extractColumnsFrom(TIPChaptersTIS);


// VCPAuthorBooksVCS.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { View } from "ts-sql-query/View";
import type { DBConnection } from "../helpers/connection-source";
import {
    SelectedRow,
    SelectedValues,
} from "ts-sql-query/extras/types";
import {
    extractColumnsFrom,
} from "ts-sql-query/extras/utils";
import {
    Genre,
} from "../helpers/types";

class VCPAuthorBooksVCS extends View<DBConnection, 'VCPAuthorBooksVCS'> {
    id = this.optionalColumn('id', 'uuid');
    name = this.optionalColumn('name', 'string');
    authorId = this.optionalColumn('author_id', 'int');
    releasedAt = this.optionalColumn('released_at', 'localDate');
    timeToRead = this.optionalColumn('time_to_read', 'int');
    genre = this.optionalColumn<Genre>('genre', 'enum', 'genre');
    weightGrams = this.optionalColumn('weight_grams', 'double');
    authorName = this.optionalColumn('author_name', 'string');

    constructor() {
        super('author_books');
    }
}

export const VIPAuthorBooksVIS = new VCPAuthorBooksVCS();

export type SRPAuthorBooksSRS = SelectedRow<VCPAuthorBooksVCS>;
export type SVPAuthorBooksSVS = SelectedValues<VCPAuthorBooksVCS>;
export const VCsPAuthorBooksVCsS = extractColumnsFrom(VIPAuthorBooksVIS);
