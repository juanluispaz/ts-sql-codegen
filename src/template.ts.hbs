{{#trim-trailing-whitespace}}
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen. 
 * Any changes will be overwritten.
 */
import { {{table.kind}} } from "ts-sql-query/{{table.kind}}";
import type { DBConnection } from "{{dbConnectionSource}}";
{{#if importExtraTypes}}
import {
    {{#if exportRowTypes.insertable}}
    InsertableRow, 
    {{/if}}
    {{#if exportRowTypes.updatable}}
    UpdatableRow, 
    {{/if}}
    {{#if exportRowTypes.selected}}
    SelectedRow,
    {{/if}}
    {{#if exportValuesTypes.insertable}}
    InsertableValues, 
    {{/if}}
    {{#if exportValuesTypes.updatable}}
    UpdatableValues, 
    {{/if}}
    {{#if exportValuesTypes.selected}}
    SelectedValues,
    {{/if}}
} from "ts-sql-query/extras/types"
{{/if}}
{{#if colSetName}}
import { extractColumnsFrom } from "ts-sql-query/extras/utils"
{{/if}}
{{#each imports}}
    {{#if isDefault}}
        {{#each imported}}
            {{#dedent-by 4 "level"}}
                import {{.}} from "{{../importPath}}"
            {{/dedent-by}}
        {{/each}}
    {{else}}
        {{#dedent-by 3 "level"}}
            import {
                {{#dedent-by 2 "level"}}
                    {{#each imported}}
                        {{.}},
                    {{/each}}
                {{/dedent-by}}
            } from "{{importPath}}"
        {{/dedent-by}}
    {{/if}}
{{/each}}

{{#if table.comment}}
{{ table.comment }}
{{/if}}
{{#if exportTableClass}}export {{/if}}class {{className}} extends {{table.kind}}<DBConnection, '{{table.idPrefix}}{{className}}'> {
    {{#dedent-by 3 "level"}}
        {{#each fields}}
            {{#if field.comment}}
            {{field.comment}}
            {{/if}}
            {{#if fieldType.kind}}
                {{#if includeDBTypeWhenIsOptional}}
                {{name}} = this.{{columnMethod}}<{{fieldType.tsType.name}}, '{{fieldType.dbType.name}}'>('{{columnName}}', '{{fieldType.kind}}', '{{fieldType.dbType.name}}'{{#if fieldType.adapter}}, {{fieldType.adapter.name}}{{/if}});
                {{else}}
                {{name}} = this.{{columnMethod}}<{{fieldType.tsType.name}}>('{{columnName}}', '{{fieldType.kind}}', '{{fieldType.dbType.name}}'{{#if fieldType.adapter}}, {{fieldType.adapter.name}}{{/if}});
                {{/if}}
            {{else}}
                {{name}} = this.{{columnMethod}}('{{columnName}}', '{{fieldType.dbType.name}}'{{#if fieldType.adapter}}, {{fieldType.adapter.name}}{{/if}});
            {{/if}}
        {{/each}}
    {{/dedent-by}}

    constructor() {
        super('{{table.name}}')
    }
}

{{#if instName}}
export const {{instName}} = new {{className}}();
{{/if}}

{{#if exportRowTypes.insertable}}
export type {{exportRowTypes.insertable}} = InsertableRow<{{className}}>;
{{/if}}
{{#if exportRowTypes.updatable}}
export type {{exportRowTypes.updatable}} = UpdatableRow<{{className}}>;
{{/if}}
{{#if exportRowTypes.selected}}
export type {{exportRowTypes.selected}} = SelectedRow<{{className}}>;
{{/if}}
{{#if exportValuesTypes.insertable}}
export type {{exportValuesTypes.insertable}} = InsertableValues<{{className}}>;
{{/if}}
{{#if exportValuesTypes.updatable}}
export type {{exportValuesTypes.updatable}} = UpdatableValues<{{className}}>;
{{/if}}
{{#if exportValuesTypes.selected}}
export type {{exportValuesTypes.selected}} = SelectedValues<{{className}}>;
{{/if}}
{{#if colSetName}}
export const {{colSetName}} = extractColumnsFrom({{instName}});
{{/if}}
{{/trim-trailing-whitespace}}
